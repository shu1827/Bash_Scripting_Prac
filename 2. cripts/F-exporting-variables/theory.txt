we will talk about exporting variables, we have already seen variables many

times, but the scope of those variables are very local.

If you log out, if you close the shell, the variables will be gone.

What if you want to make variables permanent for a user or for every user in the system, then we have

to export the variables.

We'll see how we can do that.

OK, let's take a variable SEASON and let's store value to it. Monsoon.

Nothing technically just some fun

So we know that we store the variable and then we can access it.

Right, but what happens if I log out, I'm going to say exit, what exit does it closes the current

shell

The root user is logged out, dead.

So we went back to the vagrant user.

Then I'm going to so sudo -i, which will switch to root user and this time it's going to open

a new shell.

And in this new shell, we do not have the variable value.

What happened?

Well, as I said, variables are temporary in the process.

The process is dead.

So Bash Shell was the process that's dead.

So variable is gone.

So how do make it permanent?

Well, before that, let's see how we can use these variables in script that we execute from the current

shell.

Let's go to our scripts.

Let's write a script testvars.sh

Hash exclamation bin bash.

Now what this bin bash is doing here.

We know it invokes the interpreter and then executes on a command.

Right?

I will say.

The Dolar season.

$SEASON is longer this time.

Not longer, I will say.

Heavy? is more than expected.

this time. Now what's going to happen, it's going to open the shell and this will be a child shall for

our parents shell.

So.

This is the parent shell, and when I run this script, let's make it executable.

So anyway, I logged out and logged, and the variable does not exist, but let's do it once again.

Right, and it's on a current shell.

But let's see if it is available in the child, shell.

And it's not, all right here was supposed to be the variable.

The variable does exist from the parent shell, but not on the child shell.

What you can do is? You can use this command export and you can give the variable.

And then it is available to all the child shell from this parent shell.

There.

So this is what exporting does, exporting a variable will make the variable global for all the other

child shell.

But this is still temporary if I log out.

Oops!

And then I login back.

and the variable is gone.

So how do I make this permanent, what what we can do is in every user's home directory?

There is a hidden file called as .bashrc, if we place our export command and variable in .bashrc

file, then it will become permanent for this root user.

So what happens is whenever the root user login or any user, whenever any user log in, this file

will be sourced like this.

Every user will have its own a bashrc file and also another file .bash_profile.

So if I edit this .bashrc file and place my commands or script anything, if I place over here,

it will get executed.

So I say export season equal to.

Monsoon

And I'm going to save and exit.

Now, let's again try to print that.

So it's not yet available because this file is not sourced, but if I log out exit and then I log in

with this user.

And let's try this again.

It's available because the .bashrc file was sourced when the user logged in, so every user will

have its own bash rc file if I exit from here.

Currently, I am vagrant user.

Vagrant user has its own bashrc file, there.

So if I want to set make this variable permanent for vagrant users, then I need to edit, bashrc,

file of vagrant user.

But if you want to do it globally for every user, then you can use this file /etc/profile.

Now, this is global, so.

I go to the end of this file /etc/profile file and I can place my commands over here, so I'm going to

say export season equal to and this time I'm giving a different value.

Because I also want you to see the preference between these two, so I will set here, let's see,

Summer

Let's go for Winter for now.

OK, so the sequence will be like this first /etc/profile file will be sourced and then the bashrc file

file will be sourced.

So what I did, I exported same variable in profile and same variable in bashrc, but both has different

values.

Now let me log out.

And log out from vagrant user also and log back in now to the vagrant user vagrant ssh scriptbox.

OK, so I in, I'm going to say a echo dollar season and let's see what's the value for vagrant user

Winter

So this is coming from /etc/profile file that file.

But if I log in to root user.

echo $SEASON, Monsoon, now for root user, yes, profile file for everyone, but then bashrc is overriding

that variable for the root user.

All right, so the moral of the story is if you want to make variable permanent for everyone, then

edit /etc/profile file

If you want to make variable permanent for a user, then update the bashrc file of that user by

giving the export command.

OK, so let's wrap this up.

So export command is to export the variable, and you can place that command in ~/.profile, ~/.bashrc

or /etc/profile file for everyone.

.bashrc and .profile or .bash_profiles is for the user.

And that is all in exporting variable.